import os
import tkinter as tk
from tkinter import simpledialog, filedialog
import random
import pygame

# Hàm khởi tạo màn hình nhập liệu với tkinter
def get_monster_attributes():
    root = tk.Tk()
    root.withdraw()  # Ẩn cửa sổ chính của tkinter

    # Hiển thị hộp thoại nhập liệu
    monster1_health = simpledialog.askinteger("Input", "Nhập lượng máu cho quái vật 1:", minvalue=1, maxvalue=100000)
    monster1_damage = simpledialog.askinteger("Input", "Nhập lượng sát thương cho quái vật 1:", minvalue=1, maxvalue=20000)
    monster1_ultimate_multiplier = simpledialog.askinteger("Input", "Nhập hệ số sát thương tuyệt chiêu cho quái vật 1:", minvalue=1, maxvalue=100)

    monster2_health = simpledialog.askinteger("Input", "Nhập lượng máu cho quái vật 2:", minvalue=1, maxvalue=100000)
    monster2_damage = simpledialog.askinteger("Input", "Nhập lượng sát thương cho quái vật 2:", minvalue=1, maxvalue=20000)
    monster2_ultimate_multiplier = simpledialog.askinteger("Input", "Nhập hệ số sát thương tuyệt chiêu cho quái vật 2:", minvalue=1, maxvalue=100)

    # Lựa chọn hình ảnh cho quái vật 1
    monster1_image = filedialog.askopenfilename(initialdir="images", title="Chọn hình ảnh cho quái vật 1", filetypes=(("Image files", "*.jpg *.png"), ("all files", "*.*")))
    # Lựa chọn hình ảnh cho quái vật 2
    monster2_image = filedialog.askopenfilename(initialdir="images", title="Chọn hình ảnh cho quái vật 2", filetypes=(("Image files", "*.jpg *.png"), ("all files", "*.*")))

    return monster1_health, monster1_damage, monster1_ultimate_multiplier, monster1_image, monster2_health, monster2_damage, monster2_ultimate_multiplier, monster2_image

# Khởi tạo Pygame
pygame.init()
pygame.mixer.init()  # Khởi tạo âm thanh

# Kích thước màn hình
SCREEN_WIDTH = 1300
SCREEN_HEIGHT = 900

# Màu sắc
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)

# Tạo màn hình game
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Quái vật đánh nhau")

# Font chữ
font = pygame.font.SysFont(None, 48)
health_font = pygame.font.SysFont(None, 24)
damage_font = pygame.font.SysFont(None, 24)

# Tải âm thanh cho tấn công và tuyệt chiêu
attack_sound = pygame.mixer.Sound('slash-21834.mp3')
ultimate_attack_sound = pygame.mixer.Sound('sword-slash-and-swing-185432.mp3')
attack_sound.set_volume(0.5)
ultimate_attack_sound.set_volume(0.5)

def draw_text(text, font, color, surface, x, y):
    textobj = font.render(text, True, color)
    textrect = textobj.get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)

def draw_health_bar(x, y, health, max_health):
    bar_length = 250
    bar_height = 30
    fill = (health / max_health) * bar_length
    outline_rect = pygame.Rect(x, y, bar_length, bar_height)
    fill_rect = pygame.Rect(x, y, fill, bar_height)
    pygame.draw.rect(screen, RED, fill_rect)
    pygame.draw.rect(screen, BLACK, outline_rect, 2)

    # Vẽ số máu bị trừ
    if health < max_health:
        damage_taken = max_health - health
        damage_text = f"-{damage_taken} HP"
        draw_text(damage_text, health_font, RED, screen, x + bar_length + 10, y)

class Monster:
    def __init__(self, name, image_path, x, y, health, damage, ultimate_multiplier):
        self.name = name
        self.image = pygame.image.load(image_path)  # Load hình ảnh từ tệp
        self.image = pygame.transform.scale(self.image, (250, 250))
        self.x = x
        self.y = y
        self.health = health
        self.max_health = health
        self.damage = damage
        self.ultimate_multiplier = ultimate_multiplier
        self.rect = self.image.get_rect(center=(self.x, self.y))
        self.damage_text = ""
        self.attack_count = 0  # Bộ đếm số lần tấn công
        self.ultimate_count = 0  # Bộ đếm số lần dùng tuyệt chiêu
        self.win_count = 0  # Bộ đếm số lần thắng
        self.start_time = pygame.time.get_ticks()  # Thời điểm bắt đầu game
        self.is_ultimate_attacking = False
        self.ultimate_effect_start_time = 0

    def draw(self, surface):
        surface.blit(self.image, (self.rect.x, self.rect.y))
        draw_health_bar(self.rect.x, self.rect.y - 30, self.health, self.max_health)
        # Vẽ số máu--------
        draw_text(f"{self.health}/{self.max_health}", health_font, BLACK, surface, self.rect.x, self.rect.y - 50)
        # Vẽ sát thương-----
        draw_text(f"Damaged: {self.damage}", damage_font, BLACK, surface, self.rect.x, self.rect.y + self.rect.height + 10)
        # Vẽ tên
        draw_text(self.name, health_font, BLACK, surface, self.rect.x, self.rect.y - 70)
        # Vẽ bộ đếm số lần tấn công
        draw_text(f"Attacks: {self.attack_count}", health_font, BLACK, surface, self.rect.x, self.rect.y + self.rect.height + 30)
        # Vẽ bộ đếm số lần dùng tuyệt chiêu
        draw_text(f"Ultimates: {self.ultimate_count}", health_font, BLACK, surface, self.rect.x, self.rect.y + self.rect.height + 50)
        # Vẽ bộ đếm số lần thắng
        draw_text(f"Wins: {self.win_count}", health_font, BLACK, surface, self.rect.x, self.rect.y + self.rect.height + 70)
        # Vẽ thông báo sát thương
        if self.damage_text:
            if self.name == "Monster 1":
                draw_text(self.damage_text, health_font, BLACK, surface, 20, SCREEN_HEIGHT - 40)
            else:  # Quái vật 2, hiển thị thông báo sát thương bên phải
                draw_text(self.damage_text, health_font, BLACK, surface, SCREEN_WIDTH - 450, SCREEN_HEIGHT - 40)

        # Vẽ bộ đếm thời gian trên màn hình
        elapsed_time = (pygame.time.get_ticks() - self.start_time) // 1000
        timer_text = f"Time: {elapsed_time} s"
        draw_text(timer_text, health_font, BLACK, surface, SCREEN_WIDTH // 2 - 50, 20)

        # Vẽ hiệu ứng tấn công khi dùng Tuyệt Kĩ
        if self.is_ultimate_attacking:
            current_time = pygame.time.get_ticks()
            if current_time - self.ultimate_effect_start_time < 500:  # Hiệu ứng kéo dài 500ms
                effect_radius = 150 + (current_time - self.ultimate_effect_start_time) // 5
                pygame.draw.circle(surface, YELLOW, (self.rect.centerx, self.rect.centery), effect_radius, 5)
            else:
                self.is_ultimate_attacking = False

    def attack(self, other):
        damage_dealt = self.damage
        other.health -= damage_dealt
        if other.health < 0:
            other.health = 0
        # Phát âm thanh tấn công
        attack_sound.play()
        # Hiển thị sát thương và tự động xóa sau 2 giây
        self.damage_text = f"{self.name} attacked {other.name} dealt {damage_dealt} damage!"
        pygame.time.set_timer(pygame.USEREVENT, 2500)  # Tạo sự kiện đếm thời gian
        self.attack_count += 1
        pygame.time.set_timer(pygame.USEREVENT + 1, 2000)  # Xóa thông báo sát thương sau 2 giây

    def ultimate_attack(self, other):
        damage_dealt = self.damage * self.ultimate_multiplier
        other.health -= damage_dealt
        if other.health < 0:
            other.health = 0
        # Phát âm thanh tuyệt chiêu
        ultimate_attack_sound.play()
        # Hiển thị sát thương và tự động xóa sau 2 giây
        self.damage_text = f"{self.name} đã tấn công tuyệt chiêu!"
        self.ultimate_count += 1
        self.is_ultimate_attacking = True
        self.ultimate_effect_start_time = pygame.time.get_ticks()
        pygame.time.set_timer(pygame.USEREVENT + 1, 2000)  # Xóa thông báo sát thương sau 2 giây

    def reset(self):
        self.health = self.max_health
        self.attack_count = 0
        self.ultimate_count = 0

def main():
    # Lấy các thuộc tính cho hai quái vật từ người dùng
    monster1_health, monster1_damage, monster1_ultimate_multiplier, monster1_image, monster2_health, monster2_damage, monster2_ultimate_multiplier, monster2_image = get_monster_attributes()

    # Tạo đối tượng quái vật
    monster1 = Monster("Quái vật 1", monster1_image, 200, 400, monster1_health, monster1_damage, monster1_ultimate_multiplier)
    monster2 = Monster("Quái vật 2", monster2_image, 900, 400, monster2_health, monster2_damage, monster2_ultimate_multiplier)

    # Vòng lặp chính
    running = True
    turn = 0  # Lượt tấn công của quái vật
    clock = pygame.time.Clock()

    while running:
        # Xử lý sự kiện
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    if turn % 2 == 0:  # Lượt của quái vật 1
                        monster1.attack(monster2)
                    else:  # Lượt của quái vật 2
                        monster2.attack(monster1)
                    turn += 1
                elif event.key == pygame.K_u:
                    if turn % 2 == 0:  # Lượt của quái vật 1
                        monster1.ultimate_attack(monster2)
                    else:  # Lượt của quái vật 2
                        monster2.ultimate_attack(monster1)
                    turn += 1
            if event.type == pygame.USEREVENT + 1:
                monster1.damage_text = ""  # Xóa thông báo sát thương
                monster2.damage_text = ""  # Xóa thông báo sát thương

        # Vẽ các đối tượng lên màn hình
        screen.fill(WHITE)
        monster1.draw(screen)
        monster2.draw(screen)
        pygame.display.flip()
        clock.tick(60)  # Giới hạn frames per second

    pygame.quit()

if __name__ == "__main__":
    main()

